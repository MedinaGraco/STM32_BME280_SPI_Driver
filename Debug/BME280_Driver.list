
BME280_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003134  08003134  00004134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003144  08003144  00004144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800314c  0800314c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003150  08003150  00004150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003154  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003160  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003160  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000640d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143f  00000000  00000000  0000b449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a5  00000000  00000000  0000ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001528f  00000000  00000000  0000d375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078e7  00000000  00000000  00022604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844b1  00000000  00000000  00029eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae39c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ec  00000000  00000000  000ae3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000afccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800311c 	.word	0x0800311c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800311c 	.word	0x0800311c

080001d4 <__aeabi_frsub>:
 80001d4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__addsf3>
 80001da:	bf00      	nop

080001dc <__aeabi_fsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001e0 <__addsf3>:
 80001e0:	0042      	lsls	r2, r0, #1
 80001e2:	bf1f      	itttt	ne
 80001e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e8:	ea92 0f03 	teqne	r2, r3
 80001ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f4:	d06a      	beq.n	80002cc <__addsf3+0xec>
 80001f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fe:	bfc1      	itttt	gt
 8000200:	18d2      	addgt	r2, r2, r3
 8000202:	4041      	eorgt	r1, r0
 8000204:	4048      	eorgt	r0, r1
 8000206:	4041      	eorgt	r1, r0
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	2b19      	cmp	r3, #25
 800020e:	bf88      	it	hi
 8000210:	4770      	bxhi	lr
 8000212:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000216:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800021a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4240      	negne	r0, r0
 8000222:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000226:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800022a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800022e:	bf18      	it	ne
 8000230:	4249      	negne	r1, r1
 8000232:	ea92 0f03 	teq	r2, r3
 8000236:	d03f      	beq.n	80002b8 <__addsf3+0xd8>
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	fa41 fc03 	asr.w	ip, r1, r3
 8000240:	eb10 000c 	adds.w	r0, r0, ip
 8000244:	f1c3 0320 	rsb	r3, r3, #32
 8000248:	fa01 f103 	lsl.w	r1, r1, r3
 800024c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000250:	d502      	bpl.n	8000258 <__addsf3+0x78>
 8000252:	4249      	negs	r1, r1
 8000254:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000258:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800025c:	d313      	bcc.n	8000286 <__addsf3+0xa6>
 800025e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000262:	d306      	bcc.n	8000272 <__addsf3+0x92>
 8000264:	0840      	lsrs	r0, r0, #1
 8000266:	ea4f 0131 	mov.w	r1, r1, rrx
 800026a:	f102 0201 	add.w	r2, r2, #1
 800026e:	2afe      	cmp	r2, #254	@ 0xfe
 8000270:	d251      	bcs.n	8000316 <__addsf3+0x136>
 8000272:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000276:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027a:	bf08      	it	eq
 800027c:	f020 0001 	biceq.w	r0, r0, #1
 8000280:	ea40 0003 	orr.w	r0, r0, r3
 8000284:	4770      	bx	lr
 8000286:	0049      	lsls	r1, r1, #1
 8000288:	eb40 0000 	adc.w	r0, r0, r0
 800028c:	3a01      	subs	r2, #1
 800028e:	bf28      	it	cs
 8000290:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000294:	d2ed      	bcs.n	8000272 <__addsf3+0x92>
 8000296:	fab0 fc80 	clz	ip, r0
 800029a:	f1ac 0c08 	sub.w	ip, ip, #8
 800029e:	ebb2 020c 	subs.w	r2, r2, ip
 80002a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a6:	bfaa      	itet	ge
 80002a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002ac:	4252      	neglt	r2, r2
 80002ae:	4318      	orrge	r0, r3
 80002b0:	bfbc      	itt	lt
 80002b2:	40d0      	lsrlt	r0, r2
 80002b4:	4318      	orrlt	r0, r3
 80002b6:	4770      	bx	lr
 80002b8:	f092 0f00 	teq	r2, #0
 80002bc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002c0:	bf06      	itte	eq
 80002c2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002c6:	3201      	addeq	r2, #1
 80002c8:	3b01      	subne	r3, #1
 80002ca:	e7b5      	b.n	8000238 <__addsf3+0x58>
 80002cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d4:	bf18      	it	ne
 80002d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002da:	d021      	beq.n	8000320 <__addsf3+0x140>
 80002dc:	ea92 0f03 	teq	r2, r3
 80002e0:	d004      	beq.n	80002ec <__addsf3+0x10c>
 80002e2:	f092 0f00 	teq	r2, #0
 80002e6:	bf08      	it	eq
 80002e8:	4608      	moveq	r0, r1
 80002ea:	4770      	bx	lr
 80002ec:	ea90 0f01 	teq	r0, r1
 80002f0:	bf1c      	itt	ne
 80002f2:	2000      	movne	r0, #0
 80002f4:	4770      	bxne	lr
 80002f6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002fa:	d104      	bne.n	8000306 <__addsf3+0x126>
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	bf28      	it	cs
 8000300:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000304:	4770      	bx	lr
 8000306:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800030a:	bf3c      	itt	cc
 800030c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000310:	4770      	bxcc	lr
 8000312:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000316:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	4770      	bx	lr
 8000320:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000324:	bf16      	itet	ne
 8000326:	4608      	movne	r0, r1
 8000328:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800032c:	4601      	movne	r1, r0
 800032e:	0242      	lsls	r2, r0, #9
 8000330:	bf06      	itte	eq
 8000332:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000336:	ea90 0f01 	teqeq	r0, r1
 800033a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800033e:	4770      	bx	lr

08000340 <__aeabi_ui2f>:
 8000340:	f04f 0300 	mov.w	r3, #0
 8000344:	e004      	b.n	8000350 <__aeabi_i2f+0x8>
 8000346:	bf00      	nop

08000348 <__aeabi_i2f>:
 8000348:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800034c:	bf48      	it	mi
 800034e:	4240      	negmi	r0, r0
 8000350:	ea5f 0c00 	movs.w	ip, r0
 8000354:	bf08      	it	eq
 8000356:	4770      	bxeq	lr
 8000358:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800035c:	4601      	mov	r1, r0
 800035e:	f04f 0000 	mov.w	r0, #0
 8000362:	e01c      	b.n	800039e <__aeabi_l2f+0x2a>

08000364 <__aeabi_ul2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e00a      	b.n	8000388 <__aeabi_l2f+0x14>
 8000372:	bf00      	nop

08000374 <__aeabi_l2f>:
 8000374:	ea50 0201 	orrs.w	r2, r0, r1
 8000378:	bf08      	it	eq
 800037a:	4770      	bxeq	lr
 800037c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000380:	d502      	bpl.n	8000388 <__aeabi_l2f+0x14>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	ea5f 0c01 	movs.w	ip, r1
 800038c:	bf02      	ittt	eq
 800038e:	4684      	moveq	ip, r0
 8000390:	4601      	moveq	r1, r0
 8000392:	2000      	moveq	r0, #0
 8000394:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000398:	bf08      	it	eq
 800039a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800039e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003a2:	fabc f28c 	clz	r2, ip
 80003a6:	3a08      	subs	r2, #8
 80003a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003ac:	db10      	blt.n	80003d0 <__aeabi_l2f+0x5c>
 80003ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b2:	4463      	add	r3, ip
 80003b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b8:	f1c2 0220 	rsb	r2, r2, #32
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c0:	fa20 f202 	lsr.w	r2, r0, r2
 80003c4:	eb43 0002 	adc.w	r0, r3, r2
 80003c8:	bf08      	it	eq
 80003ca:	f020 0001 	biceq.w	r0, r0, #1
 80003ce:	4770      	bx	lr
 80003d0:	f102 0220 	add.w	r2, r2, #32
 80003d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d8:	f1c2 0220 	rsb	r2, r2, #32
 80003dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e0:	fa21 f202 	lsr.w	r2, r1, r2
 80003e4:	eb43 0002 	adc.w	r0, r3, r2
 80003e8:	bf08      	it	eq
 80003ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_ldivmod>:
 80003f0:	b97b      	cbnz	r3, 8000412 <__aeabi_ldivmod+0x22>
 80003f2:	b972      	cbnz	r2, 8000412 <__aeabi_ldivmod+0x22>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	bfbe      	ittt	lt
 80003f8:	2000      	movlt	r0, #0
 80003fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003fe:	e006      	blt.n	800040e <__aeabi_ldivmod+0x1e>
 8000400:	bf08      	it	eq
 8000402:	2800      	cmpeq	r0, #0
 8000404:	bf1c      	itt	ne
 8000406:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800040a:	f04f 30ff 	movne.w	r0, #4294967295
 800040e:	f000 b9b5 	b.w	800077c <__aeabi_idiv0>
 8000412:	f1ad 0c08 	sub.w	ip, sp, #8
 8000416:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800041a:	2900      	cmp	r1, #0
 800041c:	db09      	blt.n	8000432 <__aeabi_ldivmod+0x42>
 800041e:	2b00      	cmp	r3, #0
 8000420:	db1a      	blt.n	8000458 <__aeabi_ldivmod+0x68>
 8000422:	f000 f84d 	bl	80004c0 <__udivmoddi4>
 8000426:	f8dd e004 	ldr.w	lr, [sp, #4]
 800042a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042e:	b004      	add	sp, #16
 8000430:	4770      	bx	lr
 8000432:	4240      	negs	r0, r0
 8000434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	db1b      	blt.n	8000474 <__aeabi_ldivmod+0x84>
 800043c:	f000 f840 	bl	80004c0 <__udivmoddi4>
 8000440:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000448:	b004      	add	sp, #16
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	4252      	negs	r2, r2
 8000452:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000456:	4770      	bx	lr
 8000458:	4252      	negs	r2, r2
 800045a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045e:	f000 f82f 	bl	80004c0 <__udivmoddi4>
 8000462:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046a:	b004      	add	sp, #16
 800046c:	4240      	negs	r0, r0
 800046e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000472:	4770      	bx	lr
 8000474:	4252      	negs	r2, r2
 8000476:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800047a:	f000 f821 	bl	80004c0 <__udivmoddi4>
 800047e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000486:	b004      	add	sp, #16
 8000488:	4252      	negs	r2, r2
 800048a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800048e:	4770      	bx	lr

08000490 <__aeabi_uldivmod>:
 8000490:	b953      	cbnz	r3, 80004a8 <__aeabi_uldivmod+0x18>
 8000492:	b94a      	cbnz	r2, 80004a8 <__aeabi_uldivmod+0x18>
 8000494:	2900      	cmp	r1, #0
 8000496:	bf08      	it	eq
 8000498:	2800      	cmpeq	r0, #0
 800049a:	bf1c      	itt	ne
 800049c:	f04f 31ff 	movne.w	r1, #4294967295
 80004a0:	f04f 30ff 	movne.w	r0, #4294967295
 80004a4:	f000 b96a 	b.w	800077c <__aeabi_idiv0>
 80004a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004b0:	f000 f806 	bl	80004c0 <__udivmoddi4>
 80004b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004bc:	b004      	add	sp, #16
 80004be:	4770      	bx	lr

080004c0 <__udivmoddi4>:
 80004c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004c4:	9d08      	ldr	r5, [sp, #32]
 80004c6:	460c      	mov	r4, r1
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d14e      	bne.n	800056a <__udivmoddi4+0xaa>
 80004cc:	4694      	mov	ip, r2
 80004ce:	458c      	cmp	ip, r1
 80004d0:	4686      	mov	lr, r0
 80004d2:	fab2 f282 	clz	r2, r2
 80004d6:	d962      	bls.n	800059e <__udivmoddi4+0xde>
 80004d8:	b14a      	cbz	r2, 80004ee <__udivmoddi4+0x2e>
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	4091      	lsls	r1, r2
 80004e0:	fa20 f303 	lsr.w	r3, r0, r3
 80004e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e8:	4319      	orrs	r1, r3
 80004ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f2:	fa1f f68c 	uxth.w	r6, ip
 80004f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb04 f106 	mul.w	r1, r4, r6
 800050a:	4299      	cmp	r1, r3
 800050c:	d90a      	bls.n	8000524 <__udivmoddi4+0x64>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f104 30ff 	add.w	r0, r4, #4294967295
 8000516:	f080 8112 	bcs.w	800073e <__udivmoddi4+0x27e>
 800051a:	4299      	cmp	r1, r3
 800051c:	f240 810f 	bls.w	800073e <__udivmoddi4+0x27e>
 8000520:	3c02      	subs	r4, #2
 8000522:	4463      	add	r3, ip
 8000524:	1a59      	subs	r1, r3, r1
 8000526:	fa1f f38e 	uxth.w	r3, lr
 800052a:	fbb1 f0f7 	udiv	r0, r1, r7
 800052e:	fb07 1110 	mls	r1, r7, r0, r1
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f606 	mul.w	r6, r0, r6
 800053a:	429e      	cmp	r6, r3
 800053c:	d90a      	bls.n	8000554 <__udivmoddi4+0x94>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 31ff 	add.w	r1, r0, #4294967295
 8000546:	f080 80fc 	bcs.w	8000742 <__udivmoddi4+0x282>
 800054a:	429e      	cmp	r6, r3
 800054c:	f240 80f9 	bls.w	8000742 <__udivmoddi4+0x282>
 8000550:	4463      	add	r3, ip
 8000552:	3802      	subs	r0, #2
 8000554:	1b9b      	subs	r3, r3, r6
 8000556:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800055a:	2100      	movs	r1, #0
 800055c:	b11d      	cbz	r5, 8000566 <__udivmoddi4+0xa6>
 800055e:	40d3      	lsrs	r3, r2
 8000560:	2200      	movs	r2, #0
 8000562:	e9c5 3200 	strd	r3, r2, [r5]
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	428b      	cmp	r3, r1
 800056c:	d905      	bls.n	800057a <__udivmoddi4+0xba>
 800056e:	b10d      	cbz	r5, 8000574 <__udivmoddi4+0xb4>
 8000570:	e9c5 0100 	strd	r0, r1, [r5]
 8000574:	2100      	movs	r1, #0
 8000576:	4608      	mov	r0, r1
 8000578:	e7f5      	b.n	8000566 <__udivmoddi4+0xa6>
 800057a:	fab3 f183 	clz	r1, r3
 800057e:	2900      	cmp	r1, #0
 8000580:	d146      	bne.n	8000610 <__udivmoddi4+0x150>
 8000582:	42a3      	cmp	r3, r4
 8000584:	d302      	bcc.n	800058c <__udivmoddi4+0xcc>
 8000586:	4290      	cmp	r0, r2
 8000588:	f0c0 80f0 	bcc.w	800076c <__udivmoddi4+0x2ac>
 800058c:	1a86      	subs	r6, r0, r2
 800058e:	eb64 0303 	sbc.w	r3, r4, r3
 8000592:	2001      	movs	r0, #1
 8000594:	2d00      	cmp	r5, #0
 8000596:	d0e6      	beq.n	8000566 <__udivmoddi4+0xa6>
 8000598:	e9c5 6300 	strd	r6, r3, [r5]
 800059c:	e7e3      	b.n	8000566 <__udivmoddi4+0xa6>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	f040 8090 	bne.w	80006c4 <__udivmoddi4+0x204>
 80005a4:	eba1 040c 	sub.w	r4, r1, ip
 80005a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ac:	fa1f f78c 	uxth.w	r7, ip
 80005b0:	2101      	movs	r1, #1
 80005b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80005b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005ba:	fb08 4416 	mls	r4, r8, r6, r4
 80005be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005c2:	fb07 f006 	mul.w	r0, r7, r6
 80005c6:	4298      	cmp	r0, r3
 80005c8:	d908      	bls.n	80005dc <__udivmoddi4+0x11c>
 80005ca:	eb1c 0303 	adds.w	r3, ip, r3
 80005ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80005d2:	d202      	bcs.n	80005da <__udivmoddi4+0x11a>
 80005d4:	4298      	cmp	r0, r3
 80005d6:	f200 80cd 	bhi.w	8000774 <__udivmoddi4+0x2b4>
 80005da:	4626      	mov	r6, r4
 80005dc:	1a1c      	subs	r4, r3, r0
 80005de:	fa1f f38e 	uxth.w	r3, lr
 80005e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005e6:	fb08 4410 	mls	r4, r8, r0, r4
 80005ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ee:	fb00 f707 	mul.w	r7, r0, r7
 80005f2:	429f      	cmp	r7, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x148>
 80005f6:	eb1c 0303 	adds.w	r3, ip, r3
 80005fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80005fe:	d202      	bcs.n	8000606 <__udivmoddi4+0x146>
 8000600:	429f      	cmp	r7, r3
 8000602:	f200 80b0 	bhi.w	8000766 <__udivmoddi4+0x2a6>
 8000606:	4620      	mov	r0, r4
 8000608:	1bdb      	subs	r3, r3, r7
 800060a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800060e:	e7a5      	b.n	800055c <__udivmoddi4+0x9c>
 8000610:	f1c1 0620 	rsb	r6, r1, #32
 8000614:	408b      	lsls	r3, r1
 8000616:	fa22 f706 	lsr.w	r7, r2, r6
 800061a:	431f      	orrs	r7, r3
 800061c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000620:	fa04 f301 	lsl.w	r3, r4, r1
 8000624:	ea43 030c 	orr.w	r3, r3, ip
 8000628:	40f4      	lsrs	r4, r6
 800062a:	fa00 f801 	lsl.w	r8, r0, r1
 800062e:	0c38      	lsrs	r0, r7, #16
 8000630:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000634:	fbb4 fef0 	udiv	lr, r4, r0
 8000638:	fa1f fc87 	uxth.w	ip, r7
 800063c:	fb00 441e 	mls	r4, r0, lr, r4
 8000640:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000644:	fb0e f90c 	mul.w	r9, lr, ip
 8000648:	45a1      	cmp	r9, r4
 800064a:	fa02 f201 	lsl.w	r2, r2, r1
 800064e:	d90a      	bls.n	8000666 <__udivmoddi4+0x1a6>
 8000650:	193c      	adds	r4, r7, r4
 8000652:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000656:	f080 8084 	bcs.w	8000762 <__udivmoddi4+0x2a2>
 800065a:	45a1      	cmp	r9, r4
 800065c:	f240 8081 	bls.w	8000762 <__udivmoddi4+0x2a2>
 8000660:	f1ae 0e02 	sub.w	lr, lr, #2
 8000664:	443c      	add	r4, r7
 8000666:	eba4 0409 	sub.w	r4, r4, r9
 800066a:	fa1f f983 	uxth.w	r9, r3
 800066e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000672:	fb00 4413 	mls	r4, r0, r3, r4
 8000676:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800067a:	fb03 fc0c 	mul.w	ip, r3, ip
 800067e:	45a4      	cmp	ip, r4
 8000680:	d907      	bls.n	8000692 <__udivmoddi4+0x1d2>
 8000682:	193c      	adds	r4, r7, r4
 8000684:	f103 30ff 	add.w	r0, r3, #4294967295
 8000688:	d267      	bcs.n	800075a <__udivmoddi4+0x29a>
 800068a:	45a4      	cmp	ip, r4
 800068c:	d965      	bls.n	800075a <__udivmoddi4+0x29a>
 800068e:	3b02      	subs	r3, #2
 8000690:	443c      	add	r4, r7
 8000692:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000696:	fba0 9302 	umull	r9, r3, r0, r2
 800069a:	eba4 040c 	sub.w	r4, r4, ip
 800069e:	429c      	cmp	r4, r3
 80006a0:	46ce      	mov	lr, r9
 80006a2:	469c      	mov	ip, r3
 80006a4:	d351      	bcc.n	800074a <__udivmoddi4+0x28a>
 80006a6:	d04e      	beq.n	8000746 <__udivmoddi4+0x286>
 80006a8:	b155      	cbz	r5, 80006c0 <__udivmoddi4+0x200>
 80006aa:	ebb8 030e 	subs.w	r3, r8, lr
 80006ae:	eb64 040c 	sbc.w	r4, r4, ip
 80006b2:	fa04 f606 	lsl.w	r6, r4, r6
 80006b6:	40cb      	lsrs	r3, r1
 80006b8:	431e      	orrs	r6, r3
 80006ba:	40cc      	lsrs	r4, r1
 80006bc:	e9c5 6400 	strd	r6, r4, [r5]
 80006c0:	2100      	movs	r1, #0
 80006c2:	e750      	b.n	8000566 <__udivmoddi4+0xa6>
 80006c4:	f1c2 0320 	rsb	r3, r2, #32
 80006c8:	fa20 f103 	lsr.w	r1, r0, r3
 80006cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006d0:	fa24 f303 	lsr.w	r3, r4, r3
 80006d4:	4094      	lsls	r4, r2
 80006d6:	430c      	orrs	r4, r1
 80006d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80006e0:	fa1f f78c 	uxth.w	r7, ip
 80006e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ec:	0c23      	lsrs	r3, r4, #16
 80006ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006f2:	fb00 f107 	mul.w	r1, r0, r7
 80006f6:	4299      	cmp	r1, r3
 80006f8:	d908      	bls.n	800070c <__udivmoddi4+0x24c>
 80006fa:	eb1c 0303 	adds.w	r3, ip, r3
 80006fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000702:	d22c      	bcs.n	800075e <__udivmoddi4+0x29e>
 8000704:	4299      	cmp	r1, r3
 8000706:	d92a      	bls.n	800075e <__udivmoddi4+0x29e>
 8000708:	3802      	subs	r0, #2
 800070a:	4463      	add	r3, ip
 800070c:	1a5b      	subs	r3, r3, r1
 800070e:	b2a4      	uxth	r4, r4
 8000710:	fbb3 f1f8 	udiv	r1, r3, r8
 8000714:	fb08 3311 	mls	r3, r8, r1, r3
 8000718:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800071c:	fb01 f307 	mul.w	r3, r1, r7
 8000720:	42a3      	cmp	r3, r4
 8000722:	d908      	bls.n	8000736 <__udivmoddi4+0x276>
 8000724:	eb1c 0404 	adds.w	r4, ip, r4
 8000728:	f101 36ff 	add.w	r6, r1, #4294967295
 800072c:	d213      	bcs.n	8000756 <__udivmoddi4+0x296>
 800072e:	42a3      	cmp	r3, r4
 8000730:	d911      	bls.n	8000756 <__udivmoddi4+0x296>
 8000732:	3902      	subs	r1, #2
 8000734:	4464      	add	r4, ip
 8000736:	1ae4      	subs	r4, r4, r3
 8000738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800073c:	e739      	b.n	80005b2 <__udivmoddi4+0xf2>
 800073e:	4604      	mov	r4, r0
 8000740:	e6f0      	b.n	8000524 <__udivmoddi4+0x64>
 8000742:	4608      	mov	r0, r1
 8000744:	e706      	b.n	8000554 <__udivmoddi4+0x94>
 8000746:	45c8      	cmp	r8, r9
 8000748:	d2ae      	bcs.n	80006a8 <__udivmoddi4+0x1e8>
 800074a:	ebb9 0e02 	subs.w	lr, r9, r2
 800074e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000752:	3801      	subs	r0, #1
 8000754:	e7a8      	b.n	80006a8 <__udivmoddi4+0x1e8>
 8000756:	4631      	mov	r1, r6
 8000758:	e7ed      	b.n	8000736 <__udivmoddi4+0x276>
 800075a:	4603      	mov	r3, r0
 800075c:	e799      	b.n	8000692 <__udivmoddi4+0x1d2>
 800075e:	4630      	mov	r0, r6
 8000760:	e7d4      	b.n	800070c <__udivmoddi4+0x24c>
 8000762:	46d6      	mov	lr, sl
 8000764:	e77f      	b.n	8000666 <__udivmoddi4+0x1a6>
 8000766:	4463      	add	r3, ip
 8000768:	3802      	subs	r0, #2
 800076a:	e74d      	b.n	8000608 <__udivmoddi4+0x148>
 800076c:	4606      	mov	r6, r0
 800076e:	4623      	mov	r3, r4
 8000770:	4608      	mov	r0, r1
 8000772:	e70f      	b.n	8000594 <__udivmoddi4+0xd4>
 8000774:	3e02      	subs	r6, #2
 8000776:	4463      	add	r3, ip
 8000778:	e730      	b.n	80005dc <__udivmoddi4+0x11c>
 800077a:	bf00      	nop

0800077c <__aeabi_idiv0>:
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <BME280_CS_LOW>:

/*********************************************
 * Low level funkcije
*********************************************/

void BME280_CS_LOW(BME280_Device_t* dev) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->CS_port, dev->CS_PIN, GPIO_PIN_RESET);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6858      	ldr	r0, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	891b      	ldrh	r3, [r3, #8]
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	f001 fa86 	bl	8001ca4 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <BME280_CS_HIGH>:

void BME280_CS_HIGH(BME280_Device_t* dev) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->CS_port, dev->CS_PIN, GPIO_PIN_SET);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6858      	ldr	r0, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	891b      	ldrh	r3, [r3, #8]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	f001 fa76 	bl	8001ca4 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <BME280_ReadReg>:


HAL_StatusTypeDef BME280_ReadReg(BME280_Device_t* dev, uint8_t address, uint8_t* data){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	460b      	mov	r3, r1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	uint8_t tx = address | 0x80; /*postavljanje MSB na vrijednost 1*/
 80007ce:	7afb      	ldrb	r3, [r7, #11]
 80007d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	75bb      	strb	r3, [r7, #22]

	BME280_CS_LOW(dev); /*pokretanje komunikacije*/
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff ffd1 	bl	8000780 <BME280_CS_LOW>

	status = HAL_SPI_Transmit(dev->spiHandle,&tx,1,HAL_MAX_DELAY);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f107 0116 	add.w	r1, r7, #22
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	2201      	movs	r2, #1
 80007ec:	f001 ff21 	bl	8002632 <HAL_SPI_Transmit>
 80007f0:	4603      	mov	r3, r0
 80007f2:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK){
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <BME280_ReadReg+0x44>
		BME280_CS_HIGH(dev);
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff ffd0 	bl	80007a0 <BME280_CS_HIGH>
		return status;
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	e00d      	b.n	8000820 <BME280_ReadReg+0x60>
	}

	status = HAL_SPI_Receive(dev->spiHandle,data,1,HAL_MAX_DELAY);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	2201      	movs	r2, #1
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f002 f853 	bl	80028ba <HAL_SPI_Receive>
 8000814:	4603      	mov	r3, r0
 8000816:	75fb      	strb	r3, [r7, #23]
	BME280_CS_HIGH(dev);
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f7ff ffc1 	bl	80007a0 <BME280_CS_HIGH>

	return status;
 800081e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <BME280_WriteReg>:

HAL_StatusTypeDef BME280_WriteReg(BME280_Device_t* dev,uint8_t address, uint8_t data){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
 8000834:	4613      	mov	r3, r2
 8000836:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t tx[2];
	tx[0] = address & 0x7f; /*adresa s postavljenim MSB na 0*/
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800083e:	b2db      	uxtb	r3, r3
 8000840:	733b      	strb	r3, [r7, #12]
	tx[1] = data;
 8000842:	78bb      	ldrb	r3, [r7, #2]
 8000844:	737b      	strb	r3, [r7, #13]

	BME280_CS_LOW(dev);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff9a 	bl	8000780 <BME280_CS_LOW>
	status = HAL_SPI_Transmit(dev->spiHandle,tx,2,HAL_MAX_DELAY);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	f107 010c 	add.w	r1, r7, #12
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	2202      	movs	r2, #2
 800085a:	f001 feea 	bl	8002632 <HAL_SPI_Transmit>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d004      	beq.n	8000872 <BME280_WriteReg+0x4a>
		BME280_CS_HIGH(dev);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff99 	bl	80007a0 <BME280_CS_HIGH>
		return status;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	e003      	b.n	800087a <BME280_WriteReg+0x52>
	}

	BME280_CS_HIGH(dev);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff94 	bl	80007a0 <BME280_CS_HIGH>
	return status;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <BME280_ReadRegs>:
HAL_StatusTypeDef BME280_ReadRegs(BME280_Device_t* dev, uint8_t address,uint8_t* buffer, uint8_t length){
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	461a      	mov	r2, r3
 800088e:	460b      	mov	r3, r1
 8000890:	72fb      	strb	r3, [r7, #11]
 8000892:	4613      	mov	r3, r2
 8000894:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status;
	uint8_t tx = address | 0x80; /*MSB=1*/
 8000896:	7afb      	ldrb	r3, [r7, #11]
 8000898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800089c:	b2db      	uxtb	r3, r3
 800089e:	75bb      	strb	r3, [r7, #22]

	BME280_CS_LOW(dev);
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff ff6d 	bl	8000780 <BME280_CS_LOW>

	status = HAL_SPI_Transmit(dev->spiHandle,&tx,1,HAL_MAX_DELAY);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	f107 0116 	add.w	r1, r7, #22
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	2201      	movs	r2, #1
 80008b4:	f001 febd 	bl	8002632 <HAL_SPI_Transmit>
 80008b8:	4603      	mov	r3, r0
 80008ba:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK){
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d004      	beq.n	80008cc <BME280_ReadRegs+0x4a>
		BME280_CS_HIGH(dev);
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff ff6c 	bl	80007a0 <BME280_CS_HIGH>
		return status;
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
 80008ca:	e00e      	b.n	80008ea <BME280_ReadRegs+0x68>
	}
	status = HAL_SPI_Receive(dev->spiHandle,buffer,length, HAL_MAX_DELAY);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	7abb      	ldrb	r3, [r7, #10]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	f001 ffee 	bl	80028ba <HAL_SPI_Receive>
 80008de:	4603      	mov	r3, r0
 80008e0:	75fb      	strb	r3, [r7, #23]

	BME280_CS_HIGH(dev);
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f7ff ff5c 	bl	80007a0 <BME280_CS_HIGH>
	return status;
 80008e8:	7dfb      	ldrb	r3, [r7, #23]

}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <BME280_Init>:

/*********************************************
 * Funkcija za inicijalizaciju
*********************************************/

HAL_StatusTypeDef BME280_Init(BME280_Device_t* dev, SPI_HandleTypeDef* hspi,GPIO_TypeDef* CS_port, uint16_t CS_pin){
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	807b      	strh	r3, [r7, #2]

	/*Inicijalizacija strukture*/

	dev ->spiHandle = hspi;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	601a      	str	r2, [r3, #0]
	dev ->CS_port = CS_port;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
	dev ->CS_PIN = CS_pin;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	887a      	ldrh	r2, [r7, #2]
 8000910:	811a      	strh	r2, [r3, #8]

	dev ->temperature = 0.0f;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f04f 0200 	mov.w	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
	dev ->humidity = 0.0f;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
	dev ->pressure = 0.0f;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	615a      	str	r2, [r3, #20]

	/*Reset senzora*/

	HAL_StatusTypeDef status;
	status = BME280_WriteReg(dev,BME280_REG_RESET, BME280_SOFT_RESET_CMD);
 800092a:	22b6      	movs	r2, #182	@ 0xb6
 800092c:	21e0      	movs	r1, #224	@ 0xe0
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff ff7a 	bl	8000828 <BME280_WriteReg>
 8000934:	4603      	mov	r3, r0
 8000936:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <BME280_Init+0x50>
        return status;
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	e039      	b.n	80009b6 <BME280_Init+0xc4>
    }
    HAL_Delay(100);
 8000942:	2064      	movs	r0, #100	@ 0x64
 8000944:	f000 ff20 	bl	8001788 <HAL_Delay>

	/*Provjera ID-a*/
	uint8_t data;
	status = BME280_ReadReg(dev,BME280_REG_ID,&data);
 8000948:	f107 0316 	add.w	r3, r7, #22
 800094c:	461a      	mov	r2, r3
 800094e:	21d0      	movs	r1, #208	@ 0xd0
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff35 	bl	80007c0 <BME280_ReadReg>
 8000956:	4603      	mov	r3, r0
 8000958:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <BME280_Init+0x72>
        return status;
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	e028      	b.n	80009b6 <BME280_Init+0xc4>
    }
	if(data != 0x60){
 8000964:	7dbb      	ldrb	r3, [r7, #22]
 8000966:	2b60      	cmp	r3, #96	@ 0x60
 8000968:	d001      	beq.n	800096e <BME280_Init+0x7c>
		return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e023      	b.n	80009b6 <BME280_Init+0xc4>
	}

	/*Konfiguracija senzora*/


	status = BME280_WriteReg(dev,BME280_REG_CTRL_HUM,0x01); /*Oversampling x1 za vlažnost*/
 800096e:	2201      	movs	r2, #1
 8000970:	21f2      	movs	r1, #242	@ 0xf2
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f7ff ff58 	bl	8000828 <BME280_WriteReg>
 8000978:	4603      	mov	r3, r0
 800097a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <BME280_Init+0x94>
        return status;
 8000982:	7dfb      	ldrb	r3, [r7, #23]
 8000984:	e017      	b.n	80009b6 <BME280_Init+0xc4>
    }

	status = BME280_WriteReg(dev,BME280_REG_CTRL_MEAS,0x27); /*Oversampling x1 za temperaturu, pritisak i postavljanje normalnog moda rada*/
 8000986:	2227      	movs	r2, #39	@ 0x27
 8000988:	21f4      	movs	r1, #244	@ 0xf4
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f7ff ff4c 	bl	8000828 <BME280_WriteReg>
 8000990:	4603      	mov	r3, r0
 8000992:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <BME280_Init+0xac>
        return status;
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	e00b      	b.n	80009b6 <BME280_Init+0xc4>
    }

	status = BME280_WriteReg(dev,BME280_REG_CONFIG, 0x00);/*iskljucen filter*/
 800099e:	2200      	movs	r2, #0
 80009a0:	21f5      	movs	r1, #245	@ 0xf5
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff ff40 	bl	8000828 <BME280_WriteReg>
 80009a8:	4603      	mov	r3, r0
 80009aa:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <BME280_Init+0xc4>
        return status;
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	e7ff      	b.n	80009b6 <BME280_Init+0xc4>
    }
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <BME280_ReadCalibration>:
/*********************************************
* Funkcija za čitanje kalibracije
* *********************************************/

HAL_StatusTypeDef BME280_ReadCalibration(BME280_Device_t *dev){
 80009be:	b580      	push	{r7, lr}
 80009c0:	b08c      	sub	sp, #48	@ 0x30
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
    uint8_t calib_h[7];
    HAL_StatusTypeDef status;

    // temperatura i pritisak kalibracija

    status = BME280_ReadRegs(dev, 0x88, calib, 26);
 80009c6:	f107 0214 	add.w	r2, r7, #20
 80009ca:	231a      	movs	r3, #26
 80009cc:	2188      	movs	r1, #136	@ 0x88
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff57 	bl	8000882 <BME280_ReadRegs>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != HAL_OK)
 80009da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <BME280_ReadCalibration+0x2a>
    	return status;
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009e6:	e0b5      	b.n	8000b54 <BME280_ReadCalibration+0x196>
    //u memoriji se primjenjuje LittleEndian zapis, tako da je potrebno MSB bajt staviti na znacajniju poziciju
    dev->dig_T1 = (uint16_t)(calib[1] << 8)| calib[0];
 80009e8:	7d7b      	ldrb	r3, [r7, #21]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	7d3a      	ldrb	r2, [r7, #20]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	831a      	strh	r2, [r3, #24]
    dev->dig_T2 = (int16_t)(calib[3] << 8)| calib[2];
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	835a      	strh	r2, [r3, #26]
    dev->dig_T3 = (int16_t)(calib[5] << 8)| calib[4];
 8000a0a:	7e7b      	ldrb	r3, [r7, #25]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	7e3b      	ldrb	r3, [r7, #24]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	839a      	strh	r2, [r3, #28]
    dev->dig_P1 = (uint16_t)(calib[7] << 8) | calib[6];
 8000a1c:	7efb      	ldrb	r3, [r7, #27]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	7eba      	ldrb	r2, [r7, #26]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	83da      	strh	r2, [r3, #30]
    dev->dig_P2 = (int16_t)(calib[9] << 8) | calib[8];
 8000a2c:	7f7b      	ldrb	r3, [r7, #29]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	7f3b      	ldrb	r3, [r7, #28]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	841a      	strh	r2, [r3, #32]
    dev->dig_P3 = (int16_t)(calib[11] << 8) | calib[10];
 8000a3e:	7ffb      	ldrb	r3, [r7, #31]
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	7fbb      	ldrb	r3, [r7, #30]
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	845a      	strh	r2, [r3, #34]	@ 0x22
    dev->dig_P4 = (int16_t)(calib[13] << 8) | calib[12];
 8000a50:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	849a      	strh	r2, [r3, #36]	@ 0x24
    dev->dig_P5 = (int16_t)(calib[15] << 8) | calib[14];
 8000a66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    dev->dig_P6 = (int16_t)(calib[17] << 8) | calib[16];
 8000a7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	851a      	strh	r2, [r3, #40]	@ 0x28
    dev->dig_P7 = (int16_t)(calib[19] << 8) | calib[18];
 8000a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	b21a      	sxth	r2, r3
 8000a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    dev->dig_P8 = (int16_t)(calib[21] << 8) | calib[20];
 8000aa8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b21a      	sxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    dev->dig_P9 = (int16_t)(calib[23] << 8) | calib[22];
 8000abe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    dev->dig_H1 = calib[25];
 8000ad4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    // citanje podataka o kalibraciji
    status = BME280_ReadRegs(dev, 0xE1, calib_h, 7);
 8000ade:	f107 020c 	add.w	r2, r7, #12
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	21e1      	movs	r1, #225	@ 0xe1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fecb 	bl	8000882 <BME280_ReadRegs>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != HAL_OK) return status;
 8000af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <BME280_ReadCalibration+0x142>
 8000afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000afe:	e029      	b.n	8000b54 <BME280_ReadCalibration+0x196>


    dev->dig_H2 = (int16_t)(calib_h[1] << 8) | calib_h[0];
 8000b00:	7b7b      	ldrb	r3, [r7, #13]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	865a      	strh	r2, [r3, #50]	@ 0x32
    dev->dig_H3 = calib_h[2];
 8000b12:	7bbb      	ldrb	r3, [r7, #14]
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	869a      	strh	r2, [r3, #52]	@ 0x34
    dev->dig_H4 = (int16_t)((calib_h[3] << 4) | (calib_h[4] & 0x0F));
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	7c3b      	ldrb	r3, [r7, #16]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	86da      	strh	r2, [r3, #54]	@ 0x36
    dev->dig_H5 = (int16_t)((calib_h[5] << 4) | (calib_h[4] >> 4));
 8000b32:	7c7b      	ldrb	r3, [r7, #17]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	7c3b      	ldrb	r3, [r7, #16]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	871a      	strh	r2, [r3, #56]	@ 0x38
    dev->dig_H6 = (int8_t)calib_h[6];
 8000b48:	7cbb      	ldrb	r3, [r7, #18]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	875a      	strh	r2, [r3, #58]	@ 0x3a


    return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3730      	adds	r7, #48	@ 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <BME280_ReadCompensatedData>:

HAL_StatusTypeDef BME280_ReadCompensatedData(BME280_Device_t* dev){
 8000b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b60:	b0d8      	sub	sp, #352	@ 0x160
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	uint8_t data[8];
	HAL_StatusTypeDef status;

	status = BME280_ReadRegs(dev, 0xF7, data, 8);
 8000b68:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	21f7      	movs	r1, #247	@ 0xf7
 8000b70:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000b74:	f7ff fe85 	bl	8000882 <BME280_ReadRegs>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
	if (status != HAL_OK) return status;
 8000b7e:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <BME280_ReadCompensatedData+0x30>
 8000b86:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000b8a:	e3a3      	b.n	80012d4 <BME280_ReadCompensatedData+0x778>

	int32_t adc_P = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | (data[2] >> 4);
 8000b8c:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000b90:	031a      	lsls	r2, r3, #12
 8000b92:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000b9e:	091b      	lsrs	r3, r3, #4
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	int32_t adc_T = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | (data[5] >> 4);
 8000ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000bac:	031a      	lsls	r2, r3, #12
 8000bae:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8000bba:	091b      	lsrs	r3, r3, #4
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	int32_t adc_H = ((int32_t)data[6] << 8) | data[7];
 8000bc4:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 8000bc8:	021a      	lsls	r2, r3, #8
 8000bca:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150


	//proracun temperature koristeci kalibracijske parametre (formula se nalazi u dokumentaciji)

    int32_t var1, var2, t_fine;
    var1 = ((((adc_T >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 8000bd4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000bd8:	10da      	asrs	r2, r3, #3
 8000bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000bde:	8b1b      	ldrh	r3, [r3, #24]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000be8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	12db      	asrs	r3, r3, #11
 8000bf2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) * ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) *
 8000bf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000bfa:	111a      	asrs	r2, r3, #4
 8000bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c00:	8b1b      	ldrh	r3, [r3, #24]
 8000c02:	1ad1      	subs	r1, r2, r3
 8000c04:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000c08:	111a      	asrs	r2, r3, #4
 8000c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c0e:	8b1b      	ldrh	r3, [r3, #24]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	fb01 f303 	mul.w	r3, r1, r3
 8000c16:	131a      	asrs	r2, r3, #12
            ((int32_t)dev->dig_T3)) >> 14;
 8000c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c1c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) * ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) *
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	139b      	asrs	r3, r3, #14
 8000c26:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    t_fine = var1 + var2;
 8000c2a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000c2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000c32:	4413      	add	r3, r2
 8000c34:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    float temperature = (t_fine * 5 + 128) >> 8;
 8000c38:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	3380      	adds	r3, #128	@ 0x80
 8000c44:	121b      	asrs	r3, r3, #8
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4e:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
    temperature /= 100.0f;
 8000c52:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 8000c56:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8000f14 <BME280_ReadCompensatedData+0x3b8>
 8000c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5e:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140

    //proracun pritiska

    int64_t var1_p, var2_p, p;
    var1_p = ((int64_t)t_fine) - 128000;
 8000c62:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000c66:	17da      	asrs	r2, r3, #31
 8000c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000c6c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000c70:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8000c74:	460b      	mov	r3, r1
 8000c76:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8000c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000c88:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    var2_p = var1_p * var1_p * (int64_t)dev->dig_P6;
 8000c8c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000c90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000c94:	fb03 f102 	mul.w	r1, r3, r2
 8000c98:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000c9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	18ca      	adds	r2, r1, r3
 8000ca6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000caa:	fba3 4503 	umull	r4, r5, r3, r3
 8000cae:	1953      	adds	r3, r2, r5
 8000cb0:	461d      	mov	r5, r3
 8000cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000cc2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000cc6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	fb03 f205 	mul.w	r2, r3, r5
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	fb04 f303 	mul.w	r3, r4, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4602      	mov	r2, r0
 8000cda:	fba4 1202 	umull	r1, r2, r4, r2
 8000cde:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ce8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000cec:	4413      	add	r3, r2
 8000cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000cf2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8000cf6:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 8000cfa:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    var2_p += ((var1_p * (int64_t)dev->dig_P5) << 17);
 8000cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d02:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	17da      	asrs	r2, r3, #31
 8000d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d0e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000d12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000d16:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8000d1a:	462a      	mov	r2, r5
 8000d1c:	fb02 f203 	mul.w	r2, r2, r3
 8000d20:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000d24:	4621      	mov	r1, r4
 8000d26:	fb01 f303 	mul.w	r3, r1, r3
 8000d2a:	441a      	add	r2, r3
 8000d2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000d30:	4621      	mov	r1, r4
 8000d32:	fba3 ab01 	umull	sl, fp, r3, r1
 8000d36:	eb02 030b 	add.w	r3, r2, fp
 8000d3a:	469b      	mov	fp, r3
 8000d3c:	f04f 0000 	mov.w	r0, #0
 8000d40:	f04f 0100 	mov.w	r1, #0
 8000d44:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000d48:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000d4c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000d50:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000d54:	1814      	adds	r4, r2, r0
 8000d56:	643c      	str	r4, [r7, #64]	@ 0x40
 8000d58:	414b      	adcs	r3, r1
 8000d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000d5c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000d60:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    var2_p += ((int64_t)dev->dig_P4) << 35;
 8000d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d68:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	17da      	asrs	r2, r3, #31
 8000d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d74:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000d78:	f04f 0000 	mov.w	r0, #0
 8000d7c:	f04f 0100 	mov.w	r1, #0
 8000d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d84:	00d9      	lsls	r1, r3, #3
 8000d86:	2000      	movs	r0, #0
 8000d88:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000d8c:	1814      	adds	r4, r2, r0
 8000d8e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000d90:	414b      	adcs	r3, r1
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d94:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000d98:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    var1_p = (((var1_p * var1_p * (int64_t)dev->dig_P3) >> 8) + ((var1_p * (int64_t)dev->dig_P2) << 12));
 8000d9c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000da0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000da4:	fb03 f102 	mul.w	r1, r3, r2
 8000da8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000dac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	18ca      	adds	r2, r1, r3
 8000db6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000dba:	fba3 8903 	umull	r8, r9, r3, r3
 8000dbe:	eb02 0309 	add.w	r3, r2, r9
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000dc8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	17da      	asrs	r2, r3, #31
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000dd8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8000ddc:	4603      	mov	r3, r0
 8000dde:	fb03 f209 	mul.w	r2, r3, r9
 8000de2:	460b      	mov	r3, r1
 8000de4:	fb08 f303 	mul.w	r3, r8, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	4602      	mov	r2, r0
 8000dec:	fba8 1202 	umull	r1, r2, r8, r2
 8000df0:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000df4:	460a      	mov	r2, r1
 8000df6:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8000dfa:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000dfe:	4413      	add	r3, r2
 8000e00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	f04f 0100 	mov.w	r1, #0
 8000e0c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000e10:	4623      	mov	r3, r4
 8000e12:	0a18      	lsrs	r0, r3, #8
 8000e14:	462b      	mov	r3, r5
 8000e16:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e1a:	462b      	mov	r3, r5
 8000e1c:	1219      	asrs	r1, r3, #8
 8000e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e22:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	17da      	asrs	r2, r3, #31
 8000e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000e32:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	fb02 f203 	mul.w	r2, r2, r3
 8000e40:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e44:	4644      	mov	r4, r8
 8000e46:	fb04 f303 	mul.w	r3, r4, r3
 8000e4a:	441a      	add	r2, r3
 8000e4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000e50:	4644      	mov	r4, r8
 8000e52:	fba3 4304 	umull	r4, r3, r3, r4
 8000e56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8000e76:	464c      	mov	r4, r9
 8000e78:	0323      	lsls	r3, r4, #12
 8000e7a:	4644      	mov	r4, r8
 8000e7c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000e80:	4644      	mov	r4, r8
 8000e82:	0322      	lsls	r2, r4, #12
 8000e84:	1884      	adds	r4, r0, r2
 8000e86:	633c      	str	r4, [r7, #48]	@ 0x30
 8000e88:	eb41 0303 	adc.w	r3, r1, r3
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e8e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000e92:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
    var1_p = (((((int64_t)1) << 47) + var1_p) * (int64_t)dev->dig_P1) >> 33;
 8000e96:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8000e9a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000e9e:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8000ea2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8000ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000eaa:	8bdb      	ldrh	r3, [r3, #30]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000eb4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000eb8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	fb02 f203 	mul.w	r2, r2, r3
 8000ec8:	464b      	mov	r3, r9
 8000eca:	4621      	mov	r1, r4
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	4641      	mov	r1, r8
 8000ed6:	fba2 1201 	umull	r1, r2, r2, r1
 8000eda:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000ede:	460a      	mov	r2, r1
 8000ee0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000ee4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000ee8:	4413      	add	r3, r2
 8000eea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000efa:	4629      	mov	r1, r5
 8000efc:	104a      	asrs	r2, r1, #1
 8000efe:	4629      	mov	r1, r5
 8000f00:	17cb      	asrs	r3, r1, #31
 8000f02:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138

    if (var1_p == 0) return HAL_ERROR; // Division by zero protection
 8000f06:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	d108      	bne.n	8000f20 <BME280_ReadCompensatedData+0x3c4>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1e0      	b.n	80012d4 <BME280_ReadCompensatedData+0x778>
 8000f12:	bf00      	nop
 8000f14:	42c80000 	.word	0x42c80000
 8000f18:	46c80000 	.word	0x46c80000
 8000f1c:	44800000 	.word	0x44800000

    p = 1048576 - adc_P;
 8000f20:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000f24:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000f28:	17da      	asrs	r2, r3, #31
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f2e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000f32:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    p = (((p << 31) - var2_p) * 3125) / var1_p;
 8000f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f3a:	105b      	asrs	r3, r3, #1
 8000f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f44:	07db      	lsls	r3, r3, #31
 8000f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000f4a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000f4e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8000f52:	4621      	mov	r1, r4
 8000f54:	1a89      	subs	r1, r1, r2
 8000f56:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	eb61 0303 	sbc.w	r3, r1, r3
 8000f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000f64:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000f68:	4622      	mov	r2, r4
 8000f6a:	462b      	mov	r3, r5
 8000f6c:	1891      	adds	r1, r2, r2
 8000f6e:	6239      	str	r1, [r7, #32]
 8000f70:	415b      	adcs	r3, r3
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f78:	4621      	mov	r1, r4
 8000f7a:	1851      	adds	r1, r2, r1
 8000f7c:	61b9      	str	r1, [r7, #24]
 8000f7e:	4629      	mov	r1, r5
 8000f80:	414b      	adcs	r3, r1
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000f90:	4649      	mov	r1, r9
 8000f92:	018b      	lsls	r3, r1, #6
 8000f94:	4641      	mov	r1, r8
 8000f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f9a:	4641      	mov	r1, r8
 8000f9c:	018a      	lsls	r2, r1, #6
 8000f9e:	4641      	mov	r1, r8
 8000fa0:	1889      	adds	r1, r1, r2
 8000fa2:	6139      	str	r1, [r7, #16]
 8000fa4:	4649      	mov	r1, r9
 8000fa6:	eb43 0101 	adc.w	r1, r3, r1
 8000faa:	6179      	str	r1, [r7, #20]
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000fb8:	4649      	mov	r1, r9
 8000fba:	008b      	lsls	r3, r1, #2
 8000fbc:	4641      	mov	r1, r8
 8000fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	008a      	lsls	r2, r1, #2
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4622      	mov	r2, r4
 8000fce:	189b      	adds	r3, r3, r2
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	462a      	mov	r2, r5
 8000fd6:	eb42 0303 	adc.w	r3, r2, r3
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000fe8:	4649      	mov	r1, r9
 8000fea:	008b      	lsls	r3, r1, #2
 8000fec:	4641      	mov	r1, r8
 8000fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000ff2:	4641      	mov	r1, r8
 8000ff4:	008a      	lsls	r2, r1, #2
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	189b      	adds	r3, r3, r2
 8001000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001002:	462b      	mov	r3, r5
 8001004:	460a      	mov	r2, r1
 8001006:	eb42 0303 	adc.w	r3, r2, r3
 800100a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800100c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001010:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001014:	f7ff f9ec 	bl	80003f0 <__aeabi_ldivmod>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    var1_p = ((int64_t)dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001024:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001028:	b21b      	sxth	r3, r3
 800102a:	17da      	asrs	r2, r3, #31
 800102c:	673b      	str	r3, [r7, #112]	@ 0x70
 800102e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001030:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	0b50      	lsrs	r0, r2, #13
 800103e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001042:	1359      	asrs	r1, r3, #13
 8001044:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001048:	462b      	mov	r3, r5
 800104a:	fb00 f203 	mul.w	r2, r0, r3
 800104e:	4623      	mov	r3, r4
 8001050:	fb03 f301 	mul.w	r3, r3, r1
 8001054:	4413      	add	r3, r2
 8001056:	4622      	mov	r2, r4
 8001058:	fba2 1200 	umull	r1, r2, r2, r0
 800105c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001060:	460a      	mov	r2, r1
 8001062:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001066:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800106a:	4413      	add	r3, r2
 800106c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001070:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	f04f 0100 	mov.w	r1, #0
 800107c:	0b50      	lsrs	r0, r2, #13
 800107e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001082:	1359      	asrs	r1, r3, #13
 8001084:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001088:	462b      	mov	r3, r5
 800108a:	fb00 f203 	mul.w	r2, r0, r3
 800108e:	4623      	mov	r3, r4
 8001090:	fb03 f301 	mul.w	r3, r3, r1
 8001094:	4413      	add	r3, r2
 8001096:	4622      	mov	r2, r4
 8001098:	fba2 1200 	umull	r1, r2, r2, r0
 800109c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80010a0:	460a      	mov	r2, r1
 80010a2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80010a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80010aa:	4413      	add	r3, r2
 80010ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80010bc:	4621      	mov	r1, r4
 80010be:	0e4a      	lsrs	r2, r1, #25
 80010c0:	4629      	mov	r1, r5
 80010c2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80010c6:	4629      	mov	r1, r5
 80010c8:	164b      	asrs	r3, r1, #25
 80010ca:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    var2_p = ((int64_t)dev->dig_P8 * p) >> 19;
 80010ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80010d2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	17da      	asrs	r2, r3, #31
 80010da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80010dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80010de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80010e2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80010e6:	462a      	mov	r2, r5
 80010e8:	fb02 f203 	mul.w	r2, r2, r3
 80010ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010f0:	4621      	mov	r1, r4
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80010fc:	4621      	mov	r1, r4
 80010fe:	fba2 1201 	umull	r1, r2, r2, r1
 8001102:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001106:	460a      	mov	r2, r1
 8001108:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800110c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001110:	4413      	add	r3, r2
 8001112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001122:	4621      	mov	r1, r4
 8001124:	0cca      	lsrs	r2, r1, #19
 8001126:	4629      	mov	r1, r5
 8001128:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800112c:	4629      	mov	r1, r5
 800112e:	14cb      	asrs	r3, r1, #19
 8001130:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    p = ((p + var1_p + var2_p) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001134:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001138:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800113c:	1884      	adds	r4, r0, r2
 800113e:	663c      	str	r4, [r7, #96]	@ 0x60
 8001140:	eb41 0303 	adc.w	r3, r1, r3
 8001144:	667b      	str	r3, [r7, #100]	@ 0x64
 8001146:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800114a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800114e:	4621      	mov	r1, r4
 8001150:	1889      	adds	r1, r1, r2
 8001152:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001154:	4629      	mov	r1, r5
 8001156:	eb43 0101 	adc.w	r1, r3, r1
 800115a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	f04f 0100 	mov.w	r1, #0
 8001164:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001168:	4623      	mov	r3, r4
 800116a:	0a18      	lsrs	r0, r3, #8
 800116c:	462b      	mov	r3, r5
 800116e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001172:	462b      	mov	r3, r5
 8001174:	1219      	asrs	r1, r3, #8
 8001176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800117a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800117e:	b21b      	sxth	r3, r3
 8001180:	17da      	asrs	r2, r3, #31
 8001182:	653b      	str	r3, [r7, #80]	@ 0x50
 8001184:	657a      	str	r2, [r7, #84]	@ 0x54
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001192:	464c      	mov	r4, r9
 8001194:	0123      	lsls	r3, r4, #4
 8001196:	4644      	mov	r4, r8
 8001198:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800119c:	4644      	mov	r4, r8
 800119e:	0122      	lsls	r2, r4, #4
 80011a0:	1884      	adds	r4, r0, r2
 80011a2:	603c      	str	r4, [r7, #0]
 80011a4:	eb41 0303 	adc.w	r3, r1, r3
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011ae:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    float pressure = p / 25600.0f;
 80011b2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80011b6:	f7ff f8dd 	bl	8000374 <__aeabi_l2f>
 80011ba:	ee06 0a90 	vmov	s13, r0
 80011be:	ed1f 7aaa 	vldr	s14, [pc, #-680]	@ 8000f18 <BME280_ReadCompensatedData+0x3bc>
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124

    // proracun vlaznosti

    int32_t v_x1_u32r;
    v_x1_u32r = (t_fine - ((int32_t)76800));
 80011ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80011ce:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80011d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)dev->dig_H4) << 20) -
 80011d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80011da:	039a      	lsls	r2, r3, #14
 80011dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011e0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 80011e4:	051b      	lsls	r3, r3, #20
 80011e6:	1ad2      	subs	r2, r2, r3
                    (((int32_t)dev->dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80011e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011ec:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 80011f0:	4619      	mov	r1, r3
 80011f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)dev->dig_H4) << 20) -
 80011fa:	1ad3      	subs	r3, r2, r3
                    (((int32_t)dev->dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80011fc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001200:	13db      	asrs	r3, r3, #15
                  (((((((v_x1_u32r * (int32_t)dev->dig_H6) >> 10) *
 8001202:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001206:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	@ 0x3a
 800120a:	4611      	mov	r1, r2
 800120c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001210:	fb01 f202 	mul.w	r2, r1, r2
 8001214:	1292      	asrs	r2, r2, #10
                       (((v_x1_u32r * (int32_t)dev->dig_H3) >> 11) + ((int32_t)32768))) >> 10) +
 8001216:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800121a:	f9b1 1034 	ldrsh.w	r1, [r1, #52]	@ 0x34
 800121e:	4608      	mov	r0, r1
 8001220:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8001224:	fb00 f101 	mul.w	r1, r0, r1
 8001228:	12c9      	asrs	r1, r1, #11
 800122a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
                  (((((((v_x1_u32r * (int32_t)dev->dig_H6) >> 10) *
 800122e:	fb01 f202 	mul.w	r2, r1, r2
                       (((v_x1_u32r * (int32_t)dev->dig_H3) >> 11) + ((int32_t)32768))) >> 10) +
 8001232:	1292      	asrs	r2, r2, #10
 8001234:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
                     ((int32_t)2097152)) * (int32_t)dev->dig_H2 + 8192) >> 14));
 8001238:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800123c:	f9b1 1032 	ldrsh.w	r1, [r1, #50]	@ 0x32
 8001240:	fb01 f202 	mul.w	r2, r1, r2
 8001244:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001248:	1392      	asrs	r2, r2, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)dev->dig_H4) << 20) -
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * (int32_t)dev->dig_H1) >> 4);
 8001252:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001256:	13db      	asrs	r3, r3, #15
 8001258:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800125c:	13d2      	asrs	r2, r2, #15
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	11db      	asrs	r3, r3, #7
 8001264:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001268:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	111b      	asrs	r3, r3, #4
 8001272:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800127c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001284:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800128c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001290:	bfa8      	it	ge
 8001292:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001296:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    float humidity = (v_x1_u32r >> 12) / 1024.0f;
 800129a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800129e:	131b      	asrs	r3, r3, #12
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	ed5f 6ae4 	vldr	s13, [pc, #-912]	@ 8000f1c <BME280_ReadCompensatedData+0x3c0>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c


    dev->temperature = temperature;
 80012b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012b8:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80012bc:	60da      	str	r2, [r3, #12]
    dev->pressure = pressure;
 80012be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012c6:	615a      	str	r2, [r3, #20]
    dev->humidity = humidity;
 80012c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012d0:	611a      	str	r2, [r3, #16]

    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80012da:	46bd      	mov	sp, r7
 80012dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e6:	f000 f9dd 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ea:	f000 f82f 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ee:	f000 f8cf 	bl	8001490 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012f2:	f000 f897 	bl	8001424 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Inicijalizacija BME280 senzora


  if (BME280_Init(&bme280, &hspi1, GPIOA, GPIO_PIN_4) != HAL_OK) {
 80012f6:	2310      	movs	r3, #16
 80012f8:	4a11      	ldr	r2, [pc, #68]	@ (8001340 <main+0x60>)
 80012fa:	4912      	ldr	r1, [pc, #72]	@ (8001344 <main+0x64>)
 80012fc:	4812      	ldr	r0, [pc, #72]	@ (8001348 <main+0x68>)
 80012fe:	f7ff faf8 	bl	80008f2 <BME280_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <main+0x2c>
      while (1);  // Greška pri inicijalizaciji
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <main+0x28>
  }


  // Čitanje kalibracionih podataka
  if (BME280_ReadCalibration(&bme280) != HAL_OK) {
 800130c:	480e      	ldr	r0, [pc, #56]	@ (8001348 <main+0x68>)
 800130e:	f7ff fb56 	bl	80009be <BME280_ReadCalibration>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <main+0x3c>
      while (1);  // Greška pri čitanju kalibracije
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <main+0x38>
  }


  // Čitanje i kompenzacija podataka
  if (BME280_ReadCompensatedData(&bme280) == HAL_OK) {
 800131c:	480a      	ldr	r0, [pc, #40]	@ (8001348 <main+0x68>)
 800131e:	f7ff fc1d 	bl	8000b5c <BME280_ReadCompensatedData>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <main+0x5c>
      float temp = bme280.temperature;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <main+0x68>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60fb      	str	r3, [r7, #12]
      float press = bme280.pressure;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <main+0x68>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	60bb      	str	r3, [r7, #8]
      float hum = bme280.humidity;
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <main+0x68>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <main+0x5c>
 8001340:	40020000 	.word	0x40020000
 8001344:	20000028 	.word	0x20000028
 8001348:	20000080 	.word	0x20000080

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	@ 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2230      	movs	r2, #48	@ 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f001 feb2 	bl	80030c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b29      	ldr	r3, [pc, #164]	@ (800141c <SystemClock_Config+0xd0>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	4a28      	ldr	r2, [pc, #160]	@ (800141c <SystemClock_Config+0xd0>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001380:	4b26      	ldr	r3, [pc, #152]	@ (800141c <SystemClock_Config+0xd0>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <SystemClock_Config+0xd4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <SystemClock_Config+0xd4>)
 800139a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <SystemClock_Config+0xd4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013c0:	2319      	movs	r3, #25
 80013c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fc7e 	bl	8001cd8 <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013e2:	f000 f87d 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fee0 	bl	80021c8 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800140e:	f000 f867 	bl	80014e0 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	@ 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_SPI1_Init+0x64>)
 800142a:	4a18      	ldr	r2, [pc, #96]	@ (800148c <MX_SPI1_Init+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001430:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001454:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001470:	220a      	movs	r2, #10
 8001472:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <MX_SPI1_Init+0x64>)
 8001476:	f001 f853 	bl	8002520 <HAL_SPI_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001480:	f000 f82e 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000028 	.word	0x20000028
 800148c:	40013000 	.word	0x40013000

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <MX_GPIO_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <MX_GPIO_Init+0x4c>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <MX_GPIO_Init+0x4c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_GPIO_Init+0x4c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <MX_GPIO_Init+0x4c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_GPIO_Init+0x4c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <Error_Handler+0x8>

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_SPI_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001568:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001596:	23e0      	movs	r3, #224	@ 0xe0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a6:	2305      	movs	r3, #5
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <HAL_SPI_MspInit+0x8c>)
 80015b2:	f000 f9f3 	bl	800199c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40013000 	.word	0x40013000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f891 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800167e:	f001 fd29 	bl	80030d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fe2d 	bl	80012e0 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001694:	08003154 	.word	0x08003154
  ldr r2, =_sbss
 8001698:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800169c:	200000c0 	.word	0x200000c0

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f931 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff ff08 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f93b 	bl	8001982 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f911 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	@ (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	200000bc 	.word	0x200000bc

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200000bc 	.word	0x200000bc

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff47 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff5c 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffb0 	bl	80018f0 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e159      	b.n	8001c6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8148 	bne.w	8001c66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a2 	beq.w	8001c66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4a56      	ldr	r2, [pc, #344]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b32:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a52      	ldr	r2, [pc, #328]	@ (8001c88 <HAL_GPIO_Init+0x2ec>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a49      	ldr	r2, [pc, #292]	@ (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x202>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a48      	ldr	r2, [pc, #288]	@ (8001c90 <HAL_GPIO_Init+0x2f4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x1fe>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a47      	ldr	r2, [pc, #284]	@ (8001c94 <HAL_GPIO_Init+0x2f8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x1fa>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a46      	ldr	r2, [pc, #280]	@ (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x1f6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a45      	ldr	r2, [pc, #276]	@ (8001c9c <HAL_GPIO_Init+0x300>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x1f2>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e008      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e004      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x204>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f002 0203 	and.w	r2, r2, #3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb0:	4935      	ldr	r1, [pc, #212]	@ (8001c88 <HAL_GPIO_Init+0x2ec>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bbe:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f aea2 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb4:	787b      	ldrb	r3, [r7, #1]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc0:	e003      	b.n	8001cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e267      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d075      	beq.n	8001de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cf6:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d02:	4b85      	ldr	r3, [pc, #532]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b82      	ldr	r3, [pc, #520]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e242      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x74>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x98>
 8001d56:	4b70      	ldr	r3, [pc, #448]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b6d      	ldr	r3, [pc, #436]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6c      	ldr	r2, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d70:	4b69      	ldr	r3, [pc, #420]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a68      	ldr	r2, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a65      	ldr	r2, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fcee 	bl	8001770 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fcea 	bl	8001770 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e207      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b5b      	ldr	r3, [pc, #364]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fcda 	bl	8001770 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fcd6 	bl	8001770 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1f3      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe8>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1c7      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fc8f 	bl	8001770 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fc8b 	bl	8001770 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1a8      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fc6e 	bl	8001770 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc6a 	bl	8001770 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e187      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fc4e 	bl	8001770 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc4a 	bl	8001770 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e167      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x200>
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fc37 	bl	8001770 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00e      	b.n	8001f24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fc33 	bl	8001770 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d907      	bls.n	8001f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e150      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ea      	bne.n	8001f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b81      	ldr	r3, [pc, #516]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a7c      	ldr	r2, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b77      	ldr	r3, [pc, #476]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b74      	ldr	r3, [pc, #464]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a73      	ldr	r2, [pc, #460]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fbf3 	bl	8001770 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fbef 	bl	8001770 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e10c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2ea>
 8001fb4:	4b64      	ldr	r3, [pc, #400]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a63      	ldr	r2, [pc, #396]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x30c>
 8001fca:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fe4:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a57      	ldr	r2, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b55      	ldr	r3, [pc, #340]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a54      	ldr	r2, [pc, #336]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff fbb4 	bl	8001770 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7ff fbb0 	bl	8001770 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0cb      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x334>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fb9e 	bl	8001770 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff fb9a 	bl	8001770 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0b5      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a1 	beq.w	80021b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d05c      	beq.n	800213c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d141      	bne.n	800210e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fb6e 	bl	8001770 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff fb6a 	bl	8001770 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e087      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb43 	bl	8001770 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fb3f 	bl	8001770 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e05c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x416>
 800210c:	e054      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fb2c 	bl	8001770 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fb28 	bl	8001770 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e045      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x444>
 800213a:	e03d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e038      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x4ec>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d028      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d121      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800218a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	4293      	cmp	r3, r2
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cc      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d90c      	bls.n	8002204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800223e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d044      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	2b03      	cmp	r3, #3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e067      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4934      	ldr	r1, [pc, #208]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff fa5a 	bl	8001770 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7ff fa56 	bl	8001770 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20c      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f9ba 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00
 8002384:	40023800 	.word	0x40023800
 8002388:	08003134 	.word	0x08003134
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002398:	b090      	sub	sp, #64	@ 0x40
 800239a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d00d      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x40>
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	f200 80a1 	bhi.w	8002500 <HAL_RCC_GetSysClockFreq+0x16c>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x34>
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x3a>
 80023c6:	e09b      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b53      	ldr	r3, [pc, #332]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x184>)
 80023ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023cc:	e09b      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ce:	4b53      	ldr	r3, [pc, #332]	@ (800251c <HAL_RCC_GetSysClockFreq+0x188>)
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023d2:	e098      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023de:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d028      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	2200      	movs	r2, #0
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023fc:	2100      	movs	r1, #0
 80023fe:	4b47      	ldr	r3, [pc, #284]	@ (800251c <HAL_RCC_GetSysClockFreq+0x188>)
 8002400:	fb03 f201 	mul.w	r2, r3, r1
 8002404:	2300      	movs	r3, #0
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	4413      	add	r3, r2
 800240c:	4a43      	ldr	r2, [pc, #268]	@ (800251c <HAL_RCC_GetSysClockFreq+0x188>)
 800240e:	fba0 1202 	umull	r1, r2, r0, r2
 8002412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002414:	460a      	mov	r2, r1
 8002416:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800241a:	4413      	add	r3, r2
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800241e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002420:	2200      	movs	r2, #0
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	61fa      	str	r2, [r7, #28]
 8002426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800242a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800242e:	f7fe f82f 	bl	8000490 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4613      	mov	r3, r2
 8002438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800243a:	e053      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243c:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x180>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	2200      	movs	r2, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	617a      	str	r2, [r7, #20]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800244e:	f04f 0b00 	mov.w	fp, #0
 8002452:	4652      	mov	r2, sl
 8002454:	465b      	mov	r3, fp
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	0159      	lsls	r1, r3, #5
 8002460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002464:	0150      	lsls	r0, r2, #5
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	ebb2 080a 	subs.w	r8, r2, sl
 800246e:	eb63 090b 	sbc.w	r9, r3, fp
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800247e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002486:	ebb2 0408 	subs.w	r4, r2, r8
 800248a:	eb63 0509 	sbc.w	r5, r3, r9
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	00eb      	lsls	r3, r5, #3
 8002498:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800249c:	00e2      	lsls	r2, r4, #3
 800249e:	4614      	mov	r4, r2
 80024a0:	461d      	mov	r5, r3
 80024a2:	eb14 030a 	adds.w	r3, r4, sl
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	eb45 030b 	adc.w	r3, r5, fp
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ba:	4629      	mov	r1, r5
 80024bc:	028b      	lsls	r3, r1, #10
 80024be:	4621      	mov	r1, r4
 80024c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c4:	4621      	mov	r1, r4
 80024c6:	028a      	lsls	r2, r1, #10
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ce:	2200      	movs	r2, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	60fa      	str	r2, [r7, #12]
 80024d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d8:	f7fd ffda 	bl	8000490 <__aeabi_uldivmod>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4613      	mov	r3, r2
 80024e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x184>)
 8002502:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002508:	4618      	mov	r0, r3
 800250a:	3740      	adds	r7, #64	@ 0x40
 800250c:	46bd      	mov	sp, r7
 800250e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	00f42400 	.word	0x00f42400
 800251c:	017d7840 	.word	0x017d7840

08002520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07b      	b.n	800262a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002542:	d009      	beq.n	8002558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
 800254a:	e005      	b.n	8002558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe ffe2 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800258e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0104 	and.w	r1, r3, #4
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	f003 0210 	and.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b088      	sub	sp, #32
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002642:	f7ff f895 	bl	8001770 <HAL_GetTick>
 8002646:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d001      	beq.n	800265c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
 800265a:	e12a      	b.n	80028b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_SPI_Transmit+0x36>
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e122      	b.n	80028b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_SPI_Transmit+0x48>
 8002676:	2302      	movs	r3, #2
 8002678:	e11b      	b.n	80028b2 <HAL_SPI_Transmit+0x280>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2203      	movs	r2, #3
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	88fa      	ldrh	r2, [r7, #6]
 800269a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026c8:	d10f      	bne.n	80026ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b40      	cmp	r3, #64	@ 0x40
 80026f6:	d007      	beq.n	8002708 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002710:	d152      	bne.n	80027b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Transmit+0xee>
 800271a:	8b7b      	ldrh	r3, [r7, #26]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d145      	bne.n	80027ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002744:	e032      	b.n	80027ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d112      	bne.n	800277a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002778:	e018      	b.n	80027ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277a:	f7fe fff9 	bl	8001770 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d803      	bhi.n	8002792 <HAL_SPI_Transmit+0x160>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d102      	bne.n	8002798 <HAL_SPI_Transmit+0x166>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e082      	b.n	80028b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1c7      	bne.n	8002746 <HAL_SPI_Transmit+0x114>
 80027b6:	e053      	b.n	8002860 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Transmit+0x194>
 80027c0:	8b7b      	ldrh	r3, [r7, #26]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d147      	bne.n	8002856 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027ec:	e033      	b.n	8002856 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d113      	bne.n	8002824 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	7812      	ldrb	r2, [r2, #0]
 8002808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002822:	e018      	b.n	8002856 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002824:	f7fe ffa4 	bl	8001770 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d803      	bhi.n	800283c <HAL_SPI_Transmit+0x20a>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d102      	bne.n	8002842 <HAL_SPI_Transmit+0x210>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e02d      	b.n	80028b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1c6      	bne.n	80027ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fbd9 	bl	800301c <SPI_EndRxTxTransaction>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b088      	sub	sp, #32
 80028be:	af02      	add	r7, sp, #8
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	e104      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_SPI_Receive+0x2c>
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0fc      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028f2:	d112      	bne.n	800291a <HAL_SPI_Receive+0x60>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10e      	bne.n	800291a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2204      	movs	r2, #4
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f8eb 	bl	8002aec <HAL_SPI_TransmitReceive>
 8002916:	4603      	mov	r3, r0
 8002918:	e0e4      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800291a:	f7fe ff29 	bl	8001770 <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_SPI_Receive+0x74>
 800292a:	2302      	movs	r3, #2
 800292c:	e0da      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2204      	movs	r2, #4
 800293a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800297c:	d10f      	bne.n	800299e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800298c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d007      	beq.n	80029bc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d170      	bne.n	8002aa6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029c4:	e035      	b.n	8002a32 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d115      	bne.n	8002a00 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f103 020c 	add.w	r2, r3, #12
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029fe:	e018      	b.n	8002a32 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a00:	f7fe feb6 	bl	8001770 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d803      	bhi.n	8002a18 <HAL_SPI_Receive+0x15e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d102      	bne.n	8002a1e <HAL_SPI_Receive+0x164>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e058      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1c4      	bne.n	80029c6 <HAL_SPI_Receive+0x10c>
 8002a3c:	e038      	b.n	8002ab0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d113      	bne.n	8002a74 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a56:	b292      	uxth	r2, r2
 8002a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a72:	e018      	b.n	8002aa6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a74:	f7fe fe7c 	bl	8001770 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d803      	bhi.n	8002a8c <HAL_SPI_Receive+0x1d2>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Receive+0x1d8>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e01e      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1c6      	bne.n	8002a3e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	6839      	ldr	r1, [r7, #0]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fa4b 	bl	8002f50 <SPI_EndRxTransaction>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	@ 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002afa:	2301      	movs	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002afe:	f7fe fe37 	bl	8001770 <HAL_GetTick>
 8002b02:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b0a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d00c      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x4a>
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b22:	d106      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x46>
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d001      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	e17f      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x5c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x5c>
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e174      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_SPI_TransmitReceive+0x6e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e16d      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	887a      	ldrh	r2, [r7, #2]
 8002b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb6:	2b40      	cmp	r3, #64	@ 0x40
 8002bb8:	d007      	beq.n	8002bca <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bd2:	d17e      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0xf6>
 8002bdc:	8afb      	ldrh	r3, [r7, #22]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d16c      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	1c9a      	adds	r2, r3, #2
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c06:	e059      	b.n	8002cbc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d11b      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x162>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x162>
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d113      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d119      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x1a4>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	b292      	uxth	r2, r2
 8002c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c90:	f7fe fd6e 	bl	8001770 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d80d      	bhi.n	8002cbc <HAL_SPI_TransmitReceive+0x1d0>
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d009      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0bc      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1a0      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x11c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d19b      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x11c>
 8002cd0:	e082      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0x1f4>
 8002cda:	8afb      	ldrh	r3, [r7, #22]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d171      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d06:	e05d      	b.n	8002dc4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d11c      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x264>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x264>
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d114      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d119      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x2a6>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d014      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d92:	f7fe fced 	bl	8001770 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d803      	bhi.n	8002daa <HAL_SPI_TransmitReceive+0x2be>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d102      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x2c4>
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e038      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d19c      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x21c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d197      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dd8:	6a3a      	ldr	r2, [r7, #32]
 8002dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f91d 	bl	800301c <SPI_EndRxTxTransaction>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e01d      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3728      	adds	r7, #40	@ 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e50:	f7fe fc8e 	bl	8001770 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e60:	f7fe fc86 	bl	8001770 <HAL_GetTick>
 8002e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e66:	4b39      	ldr	r3, [pc, #228]	@ (8002f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	015b      	lsls	r3, r3, #5
 8002e6c:	0d1b      	lsrs	r3, r3, #20
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e76:	e055      	b.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d051      	beq.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e80:	f7fe fc76 	bl	8001770 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d902      	bls.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d13d      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eae:	d111      	bne.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb8:	d004      	beq.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec2:	d107      	bne.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002edc:	d10f      	bne.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e018      	b.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	e002      	b.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d19a      	bne.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000000 	.word	0x20000000

08002f50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f64:	d111      	bne.n	8002f8a <SPI_EndRxTransaction+0x3a>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f6e:	d004      	beq.n	8002f7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f78:	d107      	bne.n	8002f8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f92:	d12a      	bne.n	8002fea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9c:	d012      	beq.n	8002fc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2180      	movs	r1, #128	@ 0x80
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff ff49 	bl	8002e40 <SPI_WaitFlagStateUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02d      	beq.n	8003010 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e026      	b.n	8003012 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2101      	movs	r1, #1
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff ff36 	bl	8002e40 <SPI_WaitFlagStateUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01a      	beq.n	8003010 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e013      	b.n	8003012 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff ff23 	bl	8002e40 <SPI_WaitFlagStateUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e000      	b.n	8003012 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2201      	movs	r2, #1
 8003030:	2102      	movs	r1, #2
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff ff04 	bl	8002e40 <SPI_WaitFlagStateUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e032      	b.n	80030b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <SPI_EndRxTxTransaction+0xa0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1b      	ldr	r2, [pc, #108]	@ (80030c0 <SPI_EndRxTxTransaction+0xa4>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	0d5b      	lsrs	r3, r3, #21
 800305a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800306c:	d112      	bne.n	8003094 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	2180      	movs	r1, #128	@ 0x80
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fee1 	bl	8002e40 <SPI_WaitFlagStateUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e00f      	b.n	80030b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3b01      	subs	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b80      	cmp	r3, #128	@ 0x80
 80030ac:	d0f2      	beq.n	8003094 <SPI_EndRxTxTransaction+0x78>
 80030ae:	e000      	b.n	80030b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80030b0:	bf00      	nop
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000000 	.word	0x20000000
 80030c0:	165e9f81 	.word	0x165e9f81

080030c4 <memset>:
 80030c4:	4402      	add	r2, r0
 80030c6:	4603      	mov	r3, r0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d100      	bne.n	80030ce <memset+0xa>
 80030cc:	4770      	bx	lr
 80030ce:	f803 1b01 	strb.w	r1, [r3], #1
 80030d2:	e7f9      	b.n	80030c8 <memset+0x4>

080030d4 <__libc_init_array>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	4d0d      	ldr	r5, [pc, #52]	@ (800310c <__libc_init_array+0x38>)
 80030d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003110 <__libc_init_array+0x3c>)
 80030da:	1b64      	subs	r4, r4, r5
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	2600      	movs	r6, #0
 80030e0:	42a6      	cmp	r6, r4
 80030e2:	d109      	bne.n	80030f8 <__libc_init_array+0x24>
 80030e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003114 <__libc_init_array+0x40>)
 80030e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003118 <__libc_init_array+0x44>)
 80030e8:	f000 f818 	bl	800311c <_init>
 80030ec:	1b64      	subs	r4, r4, r5
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	2600      	movs	r6, #0
 80030f2:	42a6      	cmp	r6, r4
 80030f4:	d105      	bne.n	8003102 <__libc_init_array+0x2e>
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fc:	4798      	blx	r3
 80030fe:	3601      	adds	r6, #1
 8003100:	e7ee      	b.n	80030e0 <__libc_init_array+0xc>
 8003102:	f855 3b04 	ldr.w	r3, [r5], #4
 8003106:	4798      	blx	r3
 8003108:	3601      	adds	r6, #1
 800310a:	e7f2      	b.n	80030f2 <__libc_init_array+0x1e>
 800310c:	0800314c 	.word	0x0800314c
 8003110:	0800314c 	.word	0x0800314c
 8003114:	0800314c 	.word	0x0800314c
 8003118:	08003150 	.word	0x08003150

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
